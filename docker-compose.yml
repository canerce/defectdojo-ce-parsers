# This docker-compose.yml file  is fully functional to evaluate DefectDojo
# in your local environment.
#
# Although Docker Compose is one of the supported installation methods to
# deploy a containerized DefectDojo in a production environment, the
# docker-compose.yml file is not intended for production use without first
# customizing it to your particular situation.
---
services:
  nginx:
    image: "defectdojo/defectdojo-nginx:${NGINX_VERSION:-latest}"
    depends_on:
      - uwsgi
    environment:
      NGINX_METRICS_ENABLED: "${NGINX_METRICS_ENABLED:-false}"
      DD_UWSGI_HOST: "${DD_UWSGI_HOST:-uwsgi}"
      DD_UWSGI_PORT: "${DD_UWSGI_PORT:-3031}"
    volumes:
      - defectdojo_media:/usr/share/nginx/html/media
    ports:
      - target: 8080
        published: ${DD_PORT:-8080}
        protocol: tcp
        mode: host
      - target: 8443
        published: ${DD_TLS_PORT:-8443}
        protocol: tcp
        mode: host
    logging:
      driver: "json-file"
      options:
        max-size: "100k"
        max-file: "3"
    deploy:
      restart_policy:
        condition: always
        delay: 5s
  uwsgi:
    image: "defectdojo/defectdojo-django:${DJANGO_VERSION:-latest}"
    depends_on:
      - postgres
    entrypoint: ['/wait-for-it.sh', '${DD_DATABASE_HOST:-postgres}:${DD_DATABASE_PORT:-5432}', '-t', '30', '--', '/entrypoint-uwsgi.sh']
    environment:
      DD_DEBUG: 'False'
      DD_DJANGO_METRICS_ENABLED: "${DD_DJANGO_METRICS_ENABLED:-False}"
      DD_ALLOWED_HOSTS: "${DD_ALLOWED_HOSTS:-*}"
      DD_DATABASE_URL: ${DD_DATABASE_URL:-postgresql://defectdojo:defectdojo@postgres:5432/defectdojo}
      DD_CELERY_BROKER_URL: ${DD_CELERY_BROKER_URL:-redis://redis:6379/0}
      DD_SECRET_KEY: "${DD_SECRET_KEY:-hhZCp@D28z!n@NED*yB!ROMt+WzsY*iq}"
      DD_CREDENTIAL_AES_256_KEY: "${DD_CREDENTIAL_AES_256_KEY:-&91a*agLqesc*0DJ+2*bAbsUZfR*4nLw}"
      DD_DATABASE_READINESS_TIMEOUT: "${DD_DATABASE_READINESS_TIMEOUT:-30}"
      DD_CELERY_WORKER_POOL_TYPE: "${DD_CELERY_WORKER_POOL_TYPE:-solo}"
      DD_CELERY_WORKER_AUTOSCALE_MIN: "${DD_CELERY_WORKER_AUTOSCALE_MIN:-2}"
      DD_CELERY_WORKER_AUTOSCALE_MAX: "${DD_CELERY_WORKER_AUTOSCALE_MAX:-8}"
      DD_CELERY_WORKER_CONCURRENCY: "${DD_CELERY_WORKER_CONCURRENCY:-8}"
      DD_CELERY_WORKER_PREFETCH_MULTIPLIER: "${DD_CELERY_WORKER_PREFETCH_MULTIPLIER:-128}"
      DD_SCAN_FILE_MAX_SIZE: "${DD_SCAN_FILE_MAX_SIZE:-100}"
      DD_DUPLICATE_CLUSTER_CASCADE_DELETE: "${DD_DUPLICATE_CLUSTER_CASCADE_DELETE:-False}"
      DD_HASHCODE_FIELDS_PER_SCANNER: "${DD_HASHCODE_FIELDS_PER_SCANNER:-False}"
      DD_DEDUPLICATION_ALGORITHM_PER_PARSER: "${DD_DEDUPLICATION_ALGORITHM_PER_PARSER:-False}"
      DD_CREATE_CLOUD_BANNER: "${DD_CREATE_CLOUD_BANNER:-False}"
    volumes:
        - "defectdojo_extra_settings:/app/docker/extra_settings"
        - "defectdojo_media:${DD_MEDIA_ROOT:-/app/media}"
        - ./tenable/xml_format.py:/app/dojo/tools/tenable/xml_format.py
        - ./netsparker/parser.py:/app/dojo/tools/netsparker/parser.py
    logging:
      driver: "json-file"
      options:
        max-size: "100k"
        max-file: "3"
    deploy:
      restart_policy:
        condition: always
        delay: 5s
  celerybeat:
    image: "defectdojo/defectdojo-django:${DJANGO_VERSION:-latest}"
    depends_on:
      - postgres
      - redis
    entrypoint: ['/wait-for-it.sh', '${DD_DATABASE_HOST:-postgres}:${DD_DATABASE_PORT:-5432}', '-t', '30', '--', '/entrypoint-celery-beat.sh']
    environment:
      DD_DATABASE_URL: ${DD_DATABASE_URL:-postgresql://defectdojo:defectdojo@postgres:5432/defectdojo}
      DD_CELERY_BROKER_URL: ${DD_CELERY_BROKER_URL:-redis://redis:6379/0}
      DD_SECRET_KEY: "${DD_SECRET_KEY:-hhZCp@D28z!n@NED*yB!ROMt+WzsY*iq}"
      DD_CREDENTIAL_AES_256_KEY: "${DD_CREDENTIAL_AES_256_KEY:-&91a*agLqesc*0DJ+2*bAbsUZfR*4nLw}"
      DD_DATABASE_READINESS_TIMEOUT: "${DD_DATABASE_READINESS_TIMEOUT:-30}"
      DD_CELERY_WORKER_POOL_TYPE: "${DD_CELERY_WORKER_POOL_TYPE:-solo}"
      DD_CELERY_WORKER_AUTOSCALE_MIN: "${DD_CELERY_WORKER_AUTOSCALE_MIN:-2}"
      DD_CELERY_WORKER_AUTOSCALE_MAX: "${DD_CELERY_WORKER_AUTOSCALE_MAX:-8}"
      DD_CELERY_WORKER_CONCURRENCY: "${DD_CELERY_WORKER_CONCURRENCY:-8}"
      DD_CELERY_WORKER_PREFETCH_MULTIPLIER: "${DD_CELERY_WORKER_PREFETCH_MULTIPLIER:-128}"
      DD_SCAN_FILE_MAX_SIZE: "${DD_SCAN_FILE_MAX_SIZE:-100}"
      DD_DUPLICATE_CLUSTER_CASCADE_DELETE: "${DD_DUPLICATE_CLUSTER_CASCADE_DELETE:-False}"
      DD_HASHCODE_FIELDS_PER_SCANNER: "${DD_HASHCODE_FIELDS_PER_SCANNER:-False}"
      DD_DEDUPLICATION_ALGORITHM_PER_PARSER: "${DD_DEDUPLICATION_ALGORITHM_PER_PARSER:-False}"
      DD_CREATE_CLOUD_BANNER: "${DD_CREATE_CLOUD_BANNER:-False}"
    volumes:
        - "defectdojo_extra_settings:/app/docker/extra_settings"
        - ./tenable/xml_format.py:/app/dojo/tools/tenable/xml_format.py
        - ./netsparker/parser.py:/app/dojo/tools/netsparker/parser.py
    logging:
      driver: "json-file"
      options:
        max-size: "100k"
        max-file: "3"
    deploy:
      restart_policy:
        condition: always
        delay: 5s
  celeryworker:
    image: "defectdojo/defectdojo-django:${DJANGO_VERSION:-latest}"
    depends_on:
      - postgres
      - redis
    entrypoint: ['/wait-for-it.sh', '${DD_DATABASE_HOST:-postgres}:${DD_DATABASE_PORT:-5432}', '-t', '30', '--', '/entrypoint-celery-worker.sh']
    environment:
      DD_DATABASE_URL: ${DD_DATABASE_URL:-postgresql://defectdojo:defectdojo@postgres:5432/defectdojo}
      DD_CELERY_BROKER_URL: ${DD_CELERY_BROKER_URL:-redis://redis:6379/0}
      DD_SECRET_KEY: "${DD_SECRET_KEY:-hhZCp@D28z!n@NED*yB!ROMt+WzsY*iq}"
      DD_CREDENTIAL_AES_256_KEY: "${DD_CREDENTIAL_AES_256_KEY:-&91a*agLqesc*0DJ+2*bAbsUZfR*4nLw}"
      DD_DATABASE_READINESS_TIMEOUT: "${DD_DATABASE_READINESS_TIMEOUT:-30}"
      DD_CELERY_WORKER_POOL_TYPE: "${DD_CELERY_WORKER_POOL_TYPE:-solo}"
      DD_CELERY_WORKER_AUTOSCALE_MIN: "${DD_CELERY_WORKER_AUTOSCALE_MIN:-2}"
      DD_CELERY_WORKER_AUTOSCALE_MAX: "${DD_CELERY_WORKER_AUTOSCALE_MAX:-8}"
      DD_CELERY_WORKER_CONCURRENCY: "${DD_CELERY_WORKER_CONCURRENCY:-8}"
      DD_CELERY_WORKER_PREFETCH_MULTIPLIER: "${DD_CELERY_WORKER_PREFETCH_MULTIPLIER:-128}"
      DD_SCAN_FILE_MAX_SIZE: "${DD_SCAN_FILE_MAX_SIZE:-100}"
      DD_DUPLICATE_CLUSTER_CASCADE_DELETE: "${DD_DUPLICATE_CLUSTER_CASCADE_DELETE:-False}"
      DD_HASHCODE_FIELDS_PER_SCANNER: "${DD_HASHCODE_FIELDS_PER_SCANNER:-False}"
      DD_DEDUPLICATION_ALGORITHM_PER_PARSER: "${DD_DEDUPLICATION_ALGORITHM_PER_PARSER:-False}"
      DD_CREATE_CLOUD_BANNER: "${DD_CREATE_CLOUD_BANNER:-False}"
    volumes:
        - "defectdojo_extra_settings:/app/docker/extra_settings"
        - "defectdojo_media:${DD_MEDIA_ROOT:-/app/media}"
        - ./tenable/xml_format.py:/app/dojo/tools/tenable/xml_format.py
        - ./netsparker/parser.py:/app/dojo/tools/netsparker/parser.py
    logging:
      driver: "json-file"
      options:
        max-size: "100k"
        max-file: "3"
    deploy:
      restart_policy:
        condition: always
        delay: 5s
  initializer:
    image: "defectdojo/defectdojo-django:${DJANGO_VERSION:-latest}"
    depends_on:
      - postgres
    entrypoint: ['/wait-for-it.sh', '${DD_DATABASE_HOST:-postgres}:${DD_DATABASE_PORT:-5432}', '--', '/entrypoint-initializer.sh']
    environment:
      DD_DATABASE_URL: ${DD_DATABASE_URL:-postgresql://defectdojo:defectdojo@postgres:5432/defectdojo}
      DD_ADMIN_USER: "${DD_ADMIN_USER:-admin}"
      DD_ADMIN_MAIL: "${DD_ADMIN_MAIL:-admin@defectdojo.local}"
      DD_ADMIN_FIRST_NAME: "${DD_ADMIN_FIRST_NAME:-Admin}"
      DD_ADMIN_LAST_NAME: "${DD_ADMIN_LAST_NAME:-User}"
      DD_INITIALIZE: "${DD_INITIALIZE:-true}"
      DD_SECRET_KEY: "${DD_SECRET_KEY:-hhZCp@D28z!n@NED*yB!ROMt+WzsY*iq}"
      DD_CREDENTIAL_AES_256_KEY: "${DD_CREDENTIAL_AES_256_KEY:-&91a*agLqesc*0DJ+2*bAbsUZfR*4nLw}"
      DD_DATABASE_READINESS_TIMEOUT: "${DD_DATABASE_READINESS_TIMEOUT:-30}"
      DD_CELERY_WORKER_POOL_TYPE: "${DD_CELERY_WORKER_POOL_TYPE:-solo}"
      DD_CELERY_WORKER_AUTOSCALE_MIN: "${DD_CELERY_WORKER_AUTOSCALE_MIN:-2}"
      DD_CELERY_WORKER_AUTOSCALE_MAX: "${DD_CELERY_WORKER_AUTOSCALE_MAX:-8}"
      DD_CELERY_WORKER_CONCURRENCY: "${DD_CELERY_WORKER_CONCURRENCY:-8}"
      DD_CELERY_WORKER_PREFETCH_MULTIPLIER: "${DD_CELERY_WORKER_PREFETCH_MULTIPLIER:-128}"
      DD_SCAN_FILE_MAX_SIZE: "${DD_SCAN_FILE_MAX_SIZE:-100}"
      DD_DUPLICATE_CLUSTER_CASCADE_DELETE: "${DD_DUPLICATE_CLUSTER_CASCADE_DELETE:-False}"
      DD_HASHCODE_FIELDS_PER_SCANNER: "${DD_HASHCODE_FIELDS_PER_SCANNER:-False}"
      DD_DEDUPLICATION_ALGORITHM_PER_PARSER: "${DD_DEDUPLICATION_ALGORITHM_PER_PARSER:-False}"
      DD_CREATE_CLOUD_BANNER: "${DD_CREATE_CLOUD_BANNER:-False}"
    volumes:
        - "defectdojo_extra_settings:/app/docker/extra_settings"
        - ./tenable/xml_format.py:/app/dojo/tools/tenable/xml_format.py
        - ./netsparker/parser.py:/app/dojo/tools/netsparker/parser.py
  redis:
    # Pinning to this version due to licensing constraints
    image: redis:7.2.8-alpine@sha256:c88ea2979a49ca497bbf7d39241b237f86c98e58cb2f6b1bc2dd167621f819bb
    volumes:
      - defectdojo_redis:/data
    logging:
      driver: "json-file"
      options:
        max-size: "100k"
        max-file: "3"
    deploy:
      restart_policy:
        condition: always
        delay: 5s
  postgres:
    image: postgres:17.5-alpine@sha256:f325a29ec9deb7039c5f07761d77d79d537dac836ecd99f982f6ca5476724604
    environment:
      POSTGRES_DB: ${DD_DATABASE_NAME:-defectdojo}
      POSTGRES_USER: ${DD_DATABASE_USER:-defectdojo}
      POSTGRES_PASSWORD: ${DD_DATABASE_PASSWORD:-defectdojo}
    volumes:
      - defectdojo_postgres:/var/lib/postgresql/data
    logging:
      driver: "json-file"
      options:
        max-size: "100k"
        max-file: "3"
    deploy:
      restart_policy:
        condition: always
        delay: 5s
volumes:
  defectdojo_postgres: {}
  defectdojo_media: {}
  defectdojo_redis: {}
  defectdojo_extra_settings: {}
